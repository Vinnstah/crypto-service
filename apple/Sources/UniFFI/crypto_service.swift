// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(crypto_serviceFFI)
    import crypto_serviceFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_crypto_service_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_crypto_service_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public struct AssetIcons {
    public let exchangeId: String?
    public let assetId: String
    public let url: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        exchangeId: String?,
        assetId: String,
        url: String?
    ) {
        self.exchangeId = exchangeId
        self.assetId = assetId
        self.url = url
    }
}

extension AssetIcons: Equatable, Hashable {
    public static func == (lhs: AssetIcons, rhs: AssetIcons) -> Bool {
        if lhs.exchangeId != rhs.exchangeId {
            return false
        }
        if lhs.assetId != rhs.assetId {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(exchangeId)
        hasher.combine(assetId)
        hasher.combine(url)
    }
}

public struct FfiConverterTypeAssetIcons: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetIcons {
        return
            try AssetIcons(
                exchangeId: FfiConverterOptionString.read(from: &buf),
                assetId: FfiConverterString.read(from: &buf),
                url: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: AssetIcons, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.exchangeId, into: &buf)
        FfiConverterString.write(value.assetId, into: &buf)
        FfiConverterOptionString.write(value.url, into: &buf)
    }
}

public func FfiConverterTypeAssetIcons_lift(_ buf: RustBuffer) throws -> AssetIcons {
    return try FfiConverterTypeAssetIcons.lift(buf)
}

public func FfiConverterTypeAssetIcons_lower(_ value: AssetIcons) -> RustBuffer {
    return FfiConverterTypeAssetIcons.lower(value)
}

public struct AssetIconsParams {
    public let size: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        size: Int32)
    {
        self.size = size
    }
}

extension AssetIconsParams: Equatable, Hashable {
    public static func == (lhs: AssetIconsParams, rhs: AssetIconsParams) -> Bool {
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(size)
    }
}

public struct FfiConverterTypeAssetIconsParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetIconsParams {
        return
            try AssetIconsParams(
                size: FfiConverterInt32.read(from: &buf)
            )
    }

    public static func write(_ value: AssetIconsParams, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeAssetIconsParams_lift(_ buf: RustBuffer) throws -> AssetIconsParams {
    return try FfiConverterTypeAssetIconsParams.lift(buf)
}

public func FfiConverterTypeAssetIconsParams_lower(_ value: AssetIconsParams) -> RustBuffer {
    return FfiConverterTypeAssetIconsParams.lower(value)
}

public struct OrderBook {
    public let asks: [[String]]
    public let bids: [[String]]
    public let lastUpdateId: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        asks: [[String]],
        bids: [[String]],
        lastUpdateId: UInt64
    ) {
        self.asks = asks
        self.bids = bids
        self.lastUpdateId = lastUpdateId
    }
}

extension OrderBook: Equatable, Hashable {
    public static func == (lhs: OrderBook, rhs: OrderBook) -> Bool {
        if lhs.asks != rhs.asks {
            return false
        }
        if lhs.bids != rhs.bids {
            return false
        }
        if lhs.lastUpdateId != rhs.lastUpdateId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(asks)
        hasher.combine(bids)
        hasher.combine(lastUpdateId)
    }
}

public struct FfiConverterTypeOrderBook: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OrderBook {
        return
            try OrderBook(
                asks: FfiConverterSequenceSequenceString.read(from: &buf),
                bids: FfiConverterSequenceSequenceString.read(from: &buf),
                lastUpdateId: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: OrderBook, into buf: inout [UInt8]) {
        FfiConverterSequenceSequenceString.write(value.asks, into: &buf)
        FfiConverterSequenceSequenceString.write(value.bids, into: &buf)
        FfiConverterUInt64.write(value.lastUpdateId, into: &buf)
    }
}

public func FfiConverterTypeOrderBook_lift(_ buf: RustBuffer) throws -> OrderBook {
    return try FfiConverterTypeOrderBook.lift(buf)
}

public func FfiConverterTypeOrderBook_lower(_ value: OrderBook) -> RustBuffer {
    return FfiConverterTypeOrderBook.lower(value)
}

public struct Params {
    public let symbol: String
    public let limit: UInt16?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        symbol: String,
        limit: UInt16?
    ) {
        self.symbol = symbol
        self.limit = limit
    }
}

extension Params: Equatable, Hashable {
    public static func == (lhs: Params, rhs: Params) -> Bool {
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.limit != rhs.limit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(symbol)
        hasher.combine(limit)
    }
}

public struct FfiConverterTypeParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Params {
        return
            try Params(
                symbol: FfiConverterString.read(from: &buf),
                limit: FfiConverterOptionUInt16.read(from: &buf)
            )
    }

    public static func write(_ value: Params, into buf: inout [UInt8]) {
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterOptionUInt16.write(value.limit, into: &buf)
    }
}

public func FfiConverterTypeParams_lift(_ buf: RustBuffer) throws -> Params {
    return try FfiConverterTypeParams.lift(buf)
}

public func FfiConverterTypeParams_lower(_ value: Params) -> RustBuffer {
    return FfiConverterTypeParams.lower(value)
}

public struct RecentTradesResponse {
    public let id: UInt64
    public let price: String
    public let quantity: String
    public let quoteQuantity: String
    public let time: UInt64
    public let isBuyerMaker: Bool
    public let isBestMatch: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        id: UInt64,
        price: String,
        quantity: String,
        quoteQuantity: String,
        time: UInt64,
        isBuyerMaker: Bool,
        isBestMatch: Bool
    ) {
        self.id = id
        self.price = price
        self.quantity = quantity
        self.quoteQuantity = quoteQuantity
        self.time = time
        self.isBuyerMaker = isBuyerMaker
        self.isBestMatch = isBestMatch
    }
}

extension RecentTradesResponse: Equatable, Hashable {
    public static func == (lhs: RecentTradesResponse, rhs: RecentTradesResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.quantity != rhs.quantity {
            return false
        }
        if lhs.quoteQuantity != rhs.quoteQuantity {
            return false
        }
        if lhs.time != rhs.time {
            return false
        }
        if lhs.isBuyerMaker != rhs.isBuyerMaker {
            return false
        }
        if lhs.isBestMatch != rhs.isBestMatch {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(price)
        hasher.combine(quantity)
        hasher.combine(quoteQuantity)
        hasher.combine(time)
        hasher.combine(isBuyerMaker)
        hasher.combine(isBestMatch)
    }
}

public struct FfiConverterTypeRecentTradesResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RecentTradesResponse {
        return
            try RecentTradesResponse(
                id: FfiConverterUInt64.read(from: &buf),
                price: FfiConverterString.read(from: &buf),
                quantity: FfiConverterString.read(from: &buf),
                quoteQuantity: FfiConverterString.read(from: &buf),
                time: FfiConverterUInt64.read(from: &buf),
                isBuyerMaker: FfiConverterBool.read(from: &buf),
                isBestMatch: FfiConverterBool.read(from: &buf)
            )
    }

    public static func write(_ value: RecentTradesResponse, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.price, into: &buf)
        FfiConverterString.write(value.quantity, into: &buf)
        FfiConverterString.write(value.quoteQuantity, into: &buf)
        FfiConverterUInt64.write(value.time, into: &buf)
        FfiConverterBool.write(value.isBuyerMaker, into: &buf)
        FfiConverterBool.write(value.isBestMatch, into: &buf)
    }
}

public func FfiConverterTypeRecentTradesResponse_lift(_ buf: RustBuffer) throws -> RecentTradesResponse {
    return try FfiConverterTypeRecentTradesResponse.lift(buf)
}

public func FfiConverterTypeRecentTradesResponse_lower(_ value: RecentTradesResponse) -> RustBuffer {
    return FfiConverterTypeRecentTradesResponse.lower(value)
}

public struct SymbolsParams {
    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init() {}
}

extension SymbolsParams: Equatable, Hashable {
    public static func == (_: SymbolsParams, _: SymbolsParams) -> Bool {
        return true
    }

    public func hash(into _: inout Hasher) {}
}

public struct FfiConverterTypeSymbolsParams: FfiConverterRustBuffer {
    public static func read(from _: inout (data: Data, offset: Data.Index)) throws -> SymbolsParams {
        return
            SymbolsParams()
    }

    public static func write(_: SymbolsParams, into _: inout [UInt8]) {}
}

public func FfiConverterTypeSymbolsParams_lift(_ buf: RustBuffer) throws -> SymbolsParams {
    return try FfiConverterTypeSymbolsParams.lift(buf)
}

public func FfiConverterTypeSymbolsParams_lower(_ value: SymbolsParams) -> RustBuffer {
    return FfiConverterTypeSymbolsParams.lower(value)
}

public struct SymbolsResponse {
    public let symbolId: String?
    public let exchangeId: String?
    public let symbolType: String?
    public let assetIdBase: String?
    public let assetIdQuote: String?
    public let dataStart: String?
    public let dataEnd: String?
    public let dataQuoteStart: String?
    public let dataQuoteEnd: String?
    public let dataOrderbookStart: String?
    public let dataOrderbookEnd: String?
    public let dataTradeStart: String?
    public let dataTradeEnd: String?
    public let volume1Hrs: Double?
    public let volume1HrsUsd: Double?
    public let volume1Day: Double?
    public let volume1DayUsd: Double?
    public let volume1Mth: Double?
    public let volume1MthUsd: Double?
    public let price: Double?
    public let symbolIdExchange: String?
    public let assetIdBaseExchange: String?
    public let assetIdQuoteExchange: String?
    public let pricePrecision: Double?
    public let sizePrecision: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        symbolId: String?,
        exchangeId: String?,
        symbolType: String?,
        assetIdBase: String?,
        assetIdQuote: String?,
        dataStart: String?,
        dataEnd: String?,
        dataQuoteStart: String?,
        dataQuoteEnd: String?,
        dataOrderbookStart: String?,
        dataOrderbookEnd: String?,
        dataTradeStart: String?,
        dataTradeEnd: String?,
        volume1Hrs: Double?,
        volume1HrsUsd: Double?,
        volume1Day: Double?,
        volume1DayUsd: Double?,
        volume1Mth: Double?,
        volume1MthUsd: Double?,
        price: Double?,
        symbolIdExchange: String?,
        assetIdBaseExchange: String?,
        assetIdQuoteExchange: String?,
        pricePrecision: Double?,
        sizePrecision: Double?
    ) {
        self.symbolId = symbolId
        self.exchangeId = exchangeId
        self.symbolType = symbolType
        self.assetIdBase = assetIdBase
        self.assetIdQuote = assetIdQuote
        self.dataStart = dataStart
        self.dataEnd = dataEnd
        self.dataQuoteStart = dataQuoteStart
        self.dataQuoteEnd = dataQuoteEnd
        self.dataOrderbookStart = dataOrderbookStart
        self.dataOrderbookEnd = dataOrderbookEnd
        self.dataTradeStart = dataTradeStart
        self.dataTradeEnd = dataTradeEnd
        self.volume1Hrs = volume1Hrs
        self.volume1HrsUsd = volume1HrsUsd
        self.volume1Day = volume1Day
        self.volume1DayUsd = volume1DayUsd
        self.volume1Mth = volume1Mth
        self.volume1MthUsd = volume1MthUsd
        self.price = price
        self.symbolIdExchange = symbolIdExchange
        self.assetIdBaseExchange = assetIdBaseExchange
        self.assetIdQuoteExchange = assetIdQuoteExchange
        self.pricePrecision = pricePrecision
        self.sizePrecision = sizePrecision
    }
}

extension SymbolsResponse: Equatable, Hashable {
    public static func == (lhs: SymbolsResponse, rhs: SymbolsResponse) -> Bool {
        if lhs.symbolId != rhs.symbolId {
            return false
        }
        if lhs.exchangeId != rhs.exchangeId {
            return false
        }
        if lhs.symbolType != rhs.symbolType {
            return false
        }
        if lhs.assetIdBase != rhs.assetIdBase {
            return false
        }
        if lhs.assetIdQuote != rhs.assetIdQuote {
            return false
        }
        if lhs.dataStart != rhs.dataStart {
            return false
        }
        if lhs.dataEnd != rhs.dataEnd {
            return false
        }
        if lhs.dataQuoteStart != rhs.dataQuoteStart {
            return false
        }
        if lhs.dataQuoteEnd != rhs.dataQuoteEnd {
            return false
        }
        if lhs.dataOrderbookStart != rhs.dataOrderbookStart {
            return false
        }
        if lhs.dataOrderbookEnd != rhs.dataOrderbookEnd {
            return false
        }
        if lhs.dataTradeStart != rhs.dataTradeStart {
            return false
        }
        if lhs.dataTradeEnd != rhs.dataTradeEnd {
            return false
        }
        if lhs.volume1Hrs != rhs.volume1Hrs {
            return false
        }
        if lhs.volume1HrsUsd != rhs.volume1HrsUsd {
            return false
        }
        if lhs.volume1Day != rhs.volume1Day {
            return false
        }
        if lhs.volume1DayUsd != rhs.volume1DayUsd {
            return false
        }
        if lhs.volume1Mth != rhs.volume1Mth {
            return false
        }
        if lhs.volume1MthUsd != rhs.volume1MthUsd {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.symbolIdExchange != rhs.symbolIdExchange {
            return false
        }
        if lhs.assetIdBaseExchange != rhs.assetIdBaseExchange {
            return false
        }
        if lhs.assetIdQuoteExchange != rhs.assetIdQuoteExchange {
            return false
        }
        if lhs.pricePrecision != rhs.pricePrecision {
            return false
        }
        if lhs.sizePrecision != rhs.sizePrecision {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(symbolId)
        hasher.combine(exchangeId)
        hasher.combine(symbolType)
        hasher.combine(assetIdBase)
        hasher.combine(assetIdQuote)
        hasher.combine(dataStart)
        hasher.combine(dataEnd)
        hasher.combine(dataQuoteStart)
        hasher.combine(dataQuoteEnd)
        hasher.combine(dataOrderbookStart)
        hasher.combine(dataOrderbookEnd)
        hasher.combine(dataTradeStart)
        hasher.combine(dataTradeEnd)
        hasher.combine(volume1Hrs)
        hasher.combine(volume1HrsUsd)
        hasher.combine(volume1Day)
        hasher.combine(volume1DayUsd)
        hasher.combine(volume1Mth)
        hasher.combine(volume1MthUsd)
        hasher.combine(price)
        hasher.combine(symbolIdExchange)
        hasher.combine(assetIdBaseExchange)
        hasher.combine(assetIdQuoteExchange)
        hasher.combine(pricePrecision)
        hasher.combine(sizePrecision)
    }
}

public struct FfiConverterTypeSymbolsResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SymbolsResponse {
        return
            try SymbolsResponse(
                symbolId: FfiConverterOptionString.read(from: &buf),
                exchangeId: FfiConverterOptionString.read(from: &buf),
                symbolType: FfiConverterOptionString.read(from: &buf),
                assetIdBase: FfiConverterOptionString.read(from: &buf),
                assetIdQuote: FfiConverterOptionString.read(from: &buf),
                dataStart: FfiConverterOptionString.read(from: &buf),
                dataEnd: FfiConverterOptionString.read(from: &buf),
                dataQuoteStart: FfiConverterOptionString.read(from: &buf),
                dataQuoteEnd: FfiConverterOptionString.read(from: &buf),
                dataOrderbookStart: FfiConverterOptionString.read(from: &buf),
                dataOrderbookEnd: FfiConverterOptionString.read(from: &buf),
                dataTradeStart: FfiConverterOptionString.read(from: &buf),
                dataTradeEnd: FfiConverterOptionString.read(from: &buf),
                volume1Hrs: FfiConverterOptionDouble.read(from: &buf),
                volume1HrsUsd: FfiConverterOptionDouble.read(from: &buf),
                volume1Day: FfiConverterOptionDouble.read(from: &buf),
                volume1DayUsd: FfiConverterOptionDouble.read(from: &buf),
                volume1Mth: FfiConverterOptionDouble.read(from: &buf),
                volume1MthUsd: FfiConverterOptionDouble.read(from: &buf),
                price: FfiConverterOptionDouble.read(from: &buf),
                symbolIdExchange: FfiConverterOptionString.read(from: &buf),
                assetIdBaseExchange: FfiConverterOptionString.read(from: &buf),
                assetIdQuoteExchange: FfiConverterOptionString.read(from: &buf),
                pricePrecision: FfiConverterOptionDouble.read(from: &buf),
                sizePrecision: FfiConverterOptionDouble.read(from: &buf)
            )
    }

    public static func write(_ value: SymbolsResponse, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.symbolId, into: &buf)
        FfiConverterOptionString.write(value.exchangeId, into: &buf)
        FfiConverterOptionString.write(value.symbolType, into: &buf)
        FfiConverterOptionString.write(value.assetIdBase, into: &buf)
        FfiConverterOptionString.write(value.assetIdQuote, into: &buf)
        FfiConverterOptionString.write(value.dataStart, into: &buf)
        FfiConverterOptionString.write(value.dataEnd, into: &buf)
        FfiConverterOptionString.write(value.dataQuoteStart, into: &buf)
        FfiConverterOptionString.write(value.dataQuoteEnd, into: &buf)
        FfiConverterOptionString.write(value.dataOrderbookStart, into: &buf)
        FfiConverterOptionString.write(value.dataOrderbookEnd, into: &buf)
        FfiConverterOptionString.write(value.dataTradeStart, into: &buf)
        FfiConverterOptionString.write(value.dataTradeEnd, into: &buf)
        FfiConverterOptionDouble.write(value.volume1Hrs, into: &buf)
        FfiConverterOptionDouble.write(value.volume1HrsUsd, into: &buf)
        FfiConverterOptionDouble.write(value.volume1Day, into: &buf)
        FfiConverterOptionDouble.write(value.volume1DayUsd, into: &buf)
        FfiConverterOptionDouble.write(value.volume1Mth, into: &buf)
        FfiConverterOptionDouble.write(value.volume1MthUsd, into: &buf)
        FfiConverterOptionDouble.write(value.price, into: &buf)
        FfiConverterOptionString.write(value.symbolIdExchange, into: &buf)
        FfiConverterOptionString.write(value.assetIdBaseExchange, into: &buf)
        FfiConverterOptionString.write(value.assetIdQuoteExchange, into: &buf)
        FfiConverterOptionDouble.write(value.pricePrecision, into: &buf)
        FfiConverterOptionDouble.write(value.sizePrecision, into: &buf)
    }
}

public func FfiConverterTypeSymbolsResponse_lift(_ buf: RustBuffer) throws -> SymbolsResponse {
    return try FfiConverterTypeSymbolsResponse.lift(buf)
}

public func FfiConverterTypeSymbolsResponse_lower(_ value: SymbolsResponse) -> RustBuffer {
    return FfiConverterTypeSymbolsResponse.lower(value)
}

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeSymbolsResponse: FfiConverterRustBuffer {
    typealias SwiftType = [SymbolsResponse]

    public static func write(_ value: [SymbolsResponse], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSymbolsResponse.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SymbolsResponse] {
        let len: Int32 = try readInt(&buf)
        var seq = [SymbolsResponse]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeSymbolsResponse.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]

    public static func write(_ value: [[String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterSequenceString.read(from: &buf))
        }
        return seq
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, @escaping UniFfiRustFutureContinuation, UnsafeMutableRawPointer) -> Void,
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, uniffiFutureContinuationCallback, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
private class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

public func getOrderbookBinding(params: Params, binanceKey: String, coinKey: String) async -> OrderBook {
    return try! await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_crypto_service_fn_func_get_orderbook_binding(
                FfiConverterTypeParams.lower(params),
                FfiConverterString.lower(binanceKey),
                FfiConverterString.lower(coinKey)
            )
        },
        pollFunc: ffi_crypto_service_rust_future_poll_rust_buffer,
        completeFunc: ffi_crypto_service_rust_future_complete_rust_buffer,
        freeFunc: ffi_crypto_service_rust_future_free_rust_buffer,
        liftFunc: FfiConverterTypeOrderBook.lift,
        errorHandler: nil
    )
}

public func getSymbolsBinding(params: SymbolsParams) async -> [SymbolsResponse] {
    return try! await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_crypto_service_fn_func_get_symbols_binding(
                FfiConverterTypeSymbolsParams.lower(params)
            )
        },
        pollFunc: ffi_crypto_service_rust_future_poll_rust_buffer,
        completeFunc: ffi_crypto_service_rust_future_complete_rust_buffer,
        freeFunc: ffi_crypto_service_rust_future_free_rust_buffer,
        liftFunc: FfiConverterSequenceTypeSymbolsResponse.lift,
        errorHandler: nil
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_crypto_service_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_crypto_service_checksum_func_get_orderbook_binding() != 21112 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_crypto_service_checksum_func_get_symbols_binding() != 57958 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
